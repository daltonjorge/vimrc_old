let iCanHazNeoBundle=1
let neobundle_readme=expand($HOME.'/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
  echo "Installing NeoBundle.."
  echo ""
  silent !mkdir -p $HOME/.vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim $HOME/.vim/bundle/neobundle.vim
  let iCanHazNeoBundle=0
endif

if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'Shougo/vimproc', {
          \ 'build' : {
          \     'mac' : 'make -f make_mac.mak',
          \     'unix' : 'make -f make_unix.mak',
          \    },
          \ }
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-surround'
NeoBundle 'noahfrederick/vim-hemisu'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'rdolgushin/groovy.vim'
" NeoBundle 'vim-scripts/grails-vim'
" NeoBundle 'NathanNeff/grails-vim'

call neobundle#end()

" Required:
filetype plugin indent on

NeoBundleCheck

syntax on
set number
set background=dark
set laststatus=2
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set wildignore+=*/tmp/*,*/target/*,*.so,*.swp,*.zip,*.class,*.jar
set showmatch
set backspace=eol,start,indent
set cursorline
set tabstop=2
set autoindent
set expandtab
set softtabstop=2
set shiftwidth=2
set listchars=nbsp:.,eol:¬,tab:→→,extends:>,precedes:<,trail:·
set list
set encoding=utf-8
set smartcase
set ignorecase

colorscheme hemisu

""""""""""""""""""""""""""""""
" airline
""""""""""""""""""""""""""""""
let g:airline_theme             = 'powerlineish'
let g:airline_enable_branch     = 1
let g:airline_enable_syntastic  = 1
let g:airline_powerline_fonts   = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 1

let mapleader=","

" nnoremap <C-p> :Unite file_rec/async<cr>
" nnoremap <space>s :Unite -quick-match buffer<cr>

" Unite mappings
" call unite#custom#profile('file_rec', 'ignorecase', 1)
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>r :<C-u>Unite -start-insert file_rec/async:!<CR>
let g:unite_source_history_yank_enable = 1
nnoremap <leader>y :<C-u>Unite history/yank<CR>
nnoremap <silent> <leader>b :<C-u>Unite buffer bookmark<CR>
let g:unite_kind_file_vertical_preview = 1
let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'

autocmd BufWritePre * :%s/\s\+$//e

let &t_SI .= "\e[5 q"
let &t_EI .= "\e[1 q"
